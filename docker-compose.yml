services:
  mongodb:
    image: mongo:latest
    container_name: mongodb-container
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    environment:
          - DATABASE_PORT=${DATABASE_PORT}
    command: "--bind_ip_all --quiet --logpath /dev/null --replSet rs0 --port ${DATABASE_PORT}"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:${DATABASE_PORT}/test --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    networks:
      - order-service-network
    volumes:
      - mongodb:/data/db
  mongo-init:
    image: mongo:latest
    restart: "no"
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      mongosh --host mongodb-container:${DATABASE_PORT} --eval
      '
      if (rs.status().ok === 0) {
        rs.initiate({
          _id: "rs0",
          members: [{ _id: 0, host: "mongodb-container:${DATABASE_PORT}" }]
        });
      }
      '
    networks:
      - order-service-network


  order-service:
    build:
      context: ./order-service
    container_name: order-service-container
    ports:
      - "${ORDER_PORT}:${ORDER_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - ORDER_PORT=${ORDER_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_RS=${DATABASE_RS}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PORT=${DATABASE_PORT}
      - MESSAGE_BROKER_URL=${MESSAGE_BROKER_URL}
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - order-service-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules


  redis:
    image: redis:alpine
    container_name: redis-container
    ports:
      - "${MESSAGE_BROKER_PORT}:${MESSAGE_BROKER_PORT}"
    restart: unless-stopped
    networks:
      - order-service-network

networks:
  order-service-network:
    driver: bridge

volumes:
  mongodb:


